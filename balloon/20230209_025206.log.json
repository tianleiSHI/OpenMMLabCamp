{"env_info": "sys.platform: linux\nPython: 3.8.10 (default, Nov 14 2022, 12:59:47) [GCC 9.4.0]\nCUDA available: True\nGPU 0: Tesla T4\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.2, V11.2.152\nGCC: x86_64-linux-gnu-gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0\nPyTorch: 1.13.1+cu116\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.6\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.14.1+cu116\nOpenCV: 4.6.0\nMMCV: 1.7.1\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.6\nMMDetection: 2.28.1+c14dd6c", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=4,\n    train=dict(\n        type='CocoDataset',\n        ann_file='balloon/train.json',\n        img_prefix='balloon/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ],\n        classes=('balloon', )),\n    val=dict(\n        type='CocoDataset',\n        ann_file='balloon/val.json',\n        img_prefix='balloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )),\n    test=dict(\n        type='CocoDataset',\n        ann_file='balloon/val.json',\n        img_prefix='balloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = None\nrunner = dict(type='EpochBasedRunner', max_epochs=20)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=10, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'https://download.openmmlab.com/mmdetection/v2.0/mask_rcnn/mask_rcnn_r50_fpn_2x_coco/mask_rcnn_r50_fpn_2x_coco_bbox_mAP-0.392__segm_mAP-0.354_20200505_003907-3e542a40.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nwork_dir = './work_dirs/mask_rcnn_balloon'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 2003344426, "exp_name": "mask_rcnn_balloon.py"}
{"mode": "val", "epoch": 1, "iter": 13, "lr": 0.001, "bbox_mAP": 0.1278, "bbox_mAP_50": 0.1783, "bbox_mAP_75": 0.1549, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0946, "bbox_mAP_l": 0.1641, "bbox_mAP_copypaste": "0.1278 0.1783 0.1549 0.0000 0.0946 0.1641", "segm_mAP": 0.1545, "segm_mAP_50": 0.1821, "segm_mAP_75": 0.1718, "segm_mAP_s": 0.0051, "segm_mAP_m": 0.067, "segm_mAP_l": 0.363, "segm_mAP_copypaste": "0.1545 0.1821 0.1718 0.0051 0.0670 0.3630"}
{"mode": "val", "epoch": 2, "iter": 13, "lr": 0.001, "bbox_mAP": 0.5837, "bbox_mAP_50": 0.756, "bbox_mAP_75": 0.7448, "bbox_mAP_s": 0.0112, "bbox_mAP_m": 0.416, "bbox_mAP_l": 0.6634, "bbox_mAP_copypaste": "0.5837 0.7560 0.7448 0.0112 0.4160 0.6634", "segm_mAP": 0.6818, "segm_mAP_50": 0.7578, "segm_mAP_75": 0.747, "segm_mAP_s": 0.0192, "segm_mAP_m": 0.3757, "segm_mAP_l": 0.7886, "segm_mAP_copypaste": "0.6818 0.7578 0.7470 0.0192 0.3757 0.7886"}
{"mode": "val", "epoch": 3, "iter": 13, "lr": 0.001, "bbox_mAP": 0.6397, "bbox_mAP_50": 0.8113, "bbox_mAP_75": 0.8025, "bbox_mAP_s": 0.0404, "bbox_mAP_m": 0.5453, "bbox_mAP_l": 0.6995, "bbox_mAP_copypaste": "0.6397 0.8113 0.8025 0.0404 0.5453 0.6995", "segm_mAP": 0.7258, "segm_mAP_50": 0.8082, "segm_mAP_75": 0.8038, "segm_mAP_s": 0.0407, "segm_mAP_m": 0.5626, "segm_mAP_l": 0.8055, "segm_mAP_copypaste": "0.7258 0.8082 0.8038 0.0407 0.5626 0.8055"}
{"mode": "val", "epoch": 4, "iter": 13, "lr": 0.001, "bbox_mAP": 0.6479, "bbox_mAP_50": 0.8219, "bbox_mAP_75": 0.8061, "bbox_mAP_s": 0.0673, "bbox_mAP_m": 0.5611, "bbox_mAP_l": 0.702, "bbox_mAP_copypaste": "0.6479 0.8219 0.8061 0.0673 0.5611 0.7020", "segm_mAP": 0.7419, "segm_mAP_50": 0.8207, "segm_mAP_75": 0.8097, "segm_mAP_s": 0.1058, "segm_mAP_m": 0.5862, "segm_mAP_l": 0.8156, "segm_mAP_copypaste": "0.7419 0.8207 0.8097 0.1058 0.5862 0.8156"}
{"mode": "val", "epoch": 5, "iter": 13, "lr": 0.001, "bbox_mAP": 0.6691, "bbox_mAP_50": 0.8349, "bbox_mAP_75": 0.7931, "bbox_mAP_s": 0.101, "bbox_mAP_m": 0.5717, "bbox_mAP_l": 0.727, "bbox_mAP_copypaste": "0.6691 0.8349 0.7931 0.1010 0.5717 0.7270", "segm_mAP": 0.7595, "segm_mAP_50": 0.8347, "segm_mAP_75": 0.8289, "segm_mAP_s": 0.1404, "segm_mAP_m": 0.6312, "segm_mAP_l": 0.8267, "segm_mAP_copypaste": "0.7595 0.8347 0.8289 0.1404 0.6312 0.8267"}
{"mode": "val", "epoch": 6, "iter": 13, "lr": 0.001, "bbox_mAP": 0.6872, "bbox_mAP_50": 0.8514, "bbox_mAP_75": 0.8057, "bbox_mAP_s": 0.3277, "bbox_mAP_m": 0.6117, "bbox_mAP_l": 0.7393, "bbox_mAP_copypaste": "0.6872 0.8514 0.8057 0.3277 0.6117 0.7393", "segm_mAP": 0.771, "segm_mAP_50": 0.8449, "segm_mAP_75": 0.8421, "segm_mAP_s": 0.1755, "segm_mAP_m": 0.657, "segm_mAP_l": 0.8327, "segm_mAP_copypaste": "0.7710 0.8449 0.8421 0.1755 0.6570 0.8327"}
{"mode": "val", "epoch": 7, "iter": 13, "lr": 0.001, "bbox_mAP": 0.7346, "bbox_mAP_50": 0.8673, "bbox_mAP_75": 0.8408, "bbox_mAP_s": 0.47, "bbox_mAP_m": 0.6593, "bbox_mAP_l": 0.7835, "bbox_mAP_copypaste": "0.7346 0.8673 0.8408 0.4700 0.6593 0.7835", "segm_mAP": 0.7826, "segm_mAP_50": 0.8597, "segm_mAP_75": 0.8565, "segm_mAP_s": 0.2003, "segm_mAP_m": 0.6688, "segm_mAP_l": 0.8403, "segm_mAP_copypaste": "0.7826 0.8597 0.8565 0.2003 0.6688 0.8403"}
{"mode": "val", "epoch": 8, "iter": 13, "lr": 0.001, "bbox_mAP": 0.7027, "bbox_mAP_50": 0.8761, "bbox_mAP_75": 0.8298, "bbox_mAP_s": 0.2361, "bbox_mAP_m": 0.6009, "bbox_mAP_l": 0.7515, "bbox_mAP_copypaste": "0.7027 0.8761 0.8298 0.2361 0.6009 0.7515", "segm_mAP": 0.7763, "segm_mAP_50": 0.8658, "segm_mAP_75": 0.8658, "segm_mAP_s": 0.1752, "segm_mAP_m": 0.6311, "segm_mAP_l": 0.8375, "segm_mAP_copypaste": "0.7763 0.8658 0.8658 0.1752 0.6311 0.8375"}
{"mode": "val", "epoch": 9, "iter": 13, "lr": 0.001, "bbox_mAP": 0.7296, "bbox_mAP_50": 0.8811, "bbox_mAP_75": 0.8266, "bbox_mAP_s": 0.1673, "bbox_mAP_m": 0.6402, "bbox_mAP_l": 0.7788, "bbox_mAP_copypaste": "0.7296 0.8811 0.8266 0.1673 0.6402 0.7788", "segm_mAP": 0.7815, "segm_mAP_50": 0.8688, "segm_mAP_75": 0.8653, "segm_mAP_s": 0.1414, "segm_mAP_m": 0.6403, "segm_mAP_l": 0.8434, "segm_mAP_copypaste": "0.7815 0.8688 0.8653 0.1414 0.6403 0.8434"}
{"mode": "val", "epoch": 10, "iter": 13, "lr": 0.001, "bbox_mAP": 0.7349, "bbox_mAP_50": 0.8851, "bbox_mAP_75": 0.8401, "bbox_mAP_s": 0.2273, "bbox_mAP_m": 0.6457, "bbox_mAP_l": 0.7857, "bbox_mAP_copypaste": "0.7349 0.8851 0.8401 0.2273 0.6457 0.7857", "segm_mAP": 0.7879, "segm_mAP_50": 0.8707, "segm_mAP_75": 0.8707, "segm_mAP_s": 0.1702, "segm_mAP_m": 0.6289, "segm_mAP_l": 0.8532, "segm_mAP_copypaste": "0.7879 0.8707 0.8707 0.1702 0.6289 0.8532"}
{"mode": "val", "epoch": 11, "iter": 13, "lr": 0.001, "bbox_mAP": 0.7448, "bbox_mAP_50": 0.8909, "bbox_mAP_75": 0.8668, "bbox_mAP_s": 0.4277, "bbox_mAP_m": 0.6394, "bbox_mAP_l": 0.7981, "bbox_mAP_copypaste": "0.7448 0.8909 0.8668 0.4277 0.6394 0.7981", "segm_mAP": 0.793, "segm_mAP_50": 0.8756, "segm_mAP_75": 0.8718, "segm_mAP_s": 0.234, "segm_mAP_m": 0.6525, "segm_mAP_l": 0.8518, "segm_mAP_copypaste": "0.7930 0.8756 0.8718 0.2340 0.6525 0.8518"}
{"mode": "val", "epoch": 12, "iter": 13, "lr": 0.001, "bbox_mAP": 0.7434, "bbox_mAP_50": 0.8912, "bbox_mAP_75": 0.8671, "bbox_mAP_s": 0.402, "bbox_mAP_m": 0.6319, "bbox_mAP_l": 0.7999, "bbox_mAP_copypaste": "0.7434 0.8912 0.8671 0.4020 0.6319 0.7999", "segm_mAP": 0.7964, "segm_mAP_50": 0.8741, "segm_mAP_75": 0.8703, "segm_mAP_s": 0.1934, "segm_mAP_m": 0.6447, "segm_mAP_l": 0.8565, "segm_mAP_copypaste": "0.7964 0.8741 0.8703 0.1934 0.6447 0.8565"}
{"mode": "val", "epoch": 13, "iter": 13, "lr": 0.001, "bbox_mAP": 0.7638, "bbox_mAP_50": 0.8924, "bbox_mAP_75": 0.8809, "bbox_mAP_s": 0.2131, "bbox_mAP_m": 0.6499, "bbox_mAP_l": 0.8203, "bbox_mAP_copypaste": "0.7638 0.8924 0.8809 0.2131 0.6499 0.8203", "segm_mAP": 0.7845, "segm_mAP_50": 0.873, "segm_mAP_75": 0.8691, "segm_mAP_s": 0.1439, "segm_mAP_m": 0.6411, "segm_mAP_l": 0.8451, "segm_mAP_copypaste": "0.7845 0.8730 0.8691 0.1439 0.6411 0.8451"}
{"mode": "val", "epoch": 14, "iter": 13, "lr": 0.001, "bbox_mAP": 0.755, "bbox_mAP_50": 0.8921, "bbox_mAP_75": 0.881, "bbox_mAP_s": 0.2273, "bbox_mAP_m": 0.6468, "bbox_mAP_l": 0.8088, "bbox_mAP_copypaste": "0.7550 0.8921 0.8810 0.2273 0.6468 0.8088", "segm_mAP": 0.7865, "segm_mAP_50": 0.8718, "segm_mAP_75": 0.8682, "segm_mAP_s": 0.1328, "segm_mAP_m": 0.6416, "segm_mAP_l": 0.8478, "segm_mAP_copypaste": "0.7865 0.8718 0.8682 0.1328 0.6416 0.8478"}
{"mode": "val", "epoch": 15, "iter": 13, "lr": 0.001, "bbox_mAP": 0.767, "bbox_mAP_50": 0.8966, "bbox_mAP_75": 0.8848, "bbox_mAP_s": 0.3677, "bbox_mAP_m": 0.6431, "bbox_mAP_l": 0.8246, "bbox_mAP_copypaste": "0.7670 0.8966 0.8848 0.3677 0.6431 0.8246", "segm_mAP": 0.7941, "segm_mAP_50": 0.8748, "segm_mAP_75": 0.8709, "segm_mAP_s": 0.1681, "segm_mAP_m": 0.6411, "segm_mAP_l": 0.8557, "segm_mAP_copypaste": "0.7941 0.8748 0.8709 0.1681 0.6411 0.8557"}
{"mode": "val", "epoch": 16, "iter": 13, "lr": 0.001, "bbox_mAP": 0.7535, "bbox_mAP_50": 0.8929, "bbox_mAP_75": 0.8811, "bbox_mAP_s": 0.3677, "bbox_mAP_m": 0.6462, "bbox_mAP_l": 0.8081, "bbox_mAP_copypaste": "0.7535 0.8929 0.8811 0.3677 0.6462 0.8081", "segm_mAP": 0.7896, "segm_mAP_50": 0.8718, "segm_mAP_75": 0.8679, "segm_mAP_s": 0.1681, "segm_mAP_m": 0.6298, "segm_mAP_l": 0.8524, "segm_mAP_copypaste": "0.7896 0.8718 0.8679 0.1681 0.6298 0.8524"}
{"mode": "val", "epoch": 17, "iter": 13, "lr": 0.001, "bbox_mAP": 0.7724, "bbox_mAP_50": 0.8947, "bbox_mAP_75": 0.8824, "bbox_mAP_s": 0.3677, "bbox_mAP_m": 0.6556, "bbox_mAP_l": 0.827, "bbox_mAP_copypaste": "0.7724 0.8947 0.8824 0.3677 0.6556 0.8270", "segm_mAP": 0.79, "segm_mAP_50": 0.8728, "segm_mAP_75": 0.8687, "segm_mAP_s": 0.1681, "segm_mAP_m": 0.649, "segm_mAP_l": 0.849, "segm_mAP_copypaste": "0.7900 0.8728 0.8687 0.1681 0.6490 0.8490"}
{"mode": "val", "epoch": 18, "iter": 13, "lr": 0.001, "bbox_mAP": 0.7552, "bbox_mAP_50": 0.8928, "bbox_mAP_75": 0.8807, "bbox_mAP_s": 0.3677, "bbox_mAP_m": 0.6526, "bbox_mAP_l": 0.8069, "bbox_mAP_copypaste": "0.7552 0.8928 0.8807 0.3677 0.6526 0.8069", "segm_mAP": 0.7859, "segm_mAP_50": 0.8716, "segm_mAP_75": 0.8676, "segm_mAP_s": 0.1681, "segm_mAP_m": 0.6409, "segm_mAP_l": 0.8457, "segm_mAP_copypaste": "0.7859 0.8716 0.8676 0.1681 0.6409 0.8457"}
{"mode": "val", "epoch": 19, "iter": 13, "lr": 0.001, "bbox_mAP": 0.7555, "bbox_mAP_50": 0.8982, "bbox_mAP_75": 0.8852, "bbox_mAP_s": 0.3677, "bbox_mAP_m": 0.66, "bbox_mAP_l": 0.8068, "bbox_mAP_copypaste": "0.7555 0.8982 0.8852 0.3677 0.6600 0.8068", "segm_mAP": 0.7917, "segm_mAP_50": 0.8752, "segm_mAP_75": 0.871, "segm_mAP_s": 0.1681, "segm_mAP_m": 0.6441, "segm_mAP_l": 0.8525, "segm_mAP_copypaste": "0.7917 0.8752 0.8710 0.1681 0.6441 0.8525"}
{"mode": "val", "epoch": 20, "iter": 13, "lr": 0.001, "bbox_mAP": 0.765, "bbox_mAP_50": 0.8971, "bbox_mAP_75": 0.8847, "bbox_mAP_s": 0.3677, "bbox_mAP_m": 0.6652, "bbox_mAP_l": 0.8161, "bbox_mAP_copypaste": "0.7650 0.8971 0.8847 0.3677 0.6652 0.8161", "segm_mAP": 0.79, "segm_mAP_50": 0.8734, "segm_mAP_75": 0.8693, "segm_mAP_s": 0.1364, "segm_mAP_m": 0.629, "segm_mAP_l": 0.8521, "segm_mAP_copypaste": "0.7900 0.8734 0.8693 0.1364 0.6290 0.8521"}
